// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector]
}

model User {
  id          String   @id @default(cuid())
  emailAddress       String   @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  credits    Int      @default(150)
  userToProjects UserToProject[]
  questionsAsked Question[]
  stripeTransactions StripeTransactions[]
}

model Project {
  id          String   @id @default(cuid())
   createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  repoUrl     String
  deletedAt  DateTime?
  gitHubToken String?
   userToProjects UserToProject[]
  commits     Commit[]
  sourceCodeEmbeddings SourceCodeEmbedding[]

  savedQuestions       Question[] 
  meetings   Meeting[]
}


model UserToProject {
  id          String   @id @default(cuid())
  userId      String
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  project     Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}


model  Question {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  question String
  answers     String
  fileReference Json?

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  userId String
  user    User     @relation(fields: [userId], references: [id])

}

model Commit{
  id          String   @id @default(cuid())
 createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
   commitMessage String
  commitHash   String
  commitAuthorName String
  commitAuthorAvatar String
  commmitDate DateTime
  summary String
}


model SourceCodeEmbedding {
  id          String   @id @default(cuid())
 summaryEmbedding Unsupported("vector(768)")?
  summary String
  sourceCode String
  fileName String
  projectId String
  project Project @relation(fields: [projectId], references: [id])
}

model Meeting {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  meetingUrl  String? // cloudinary URL
  projectId   String
  name        String
  project     Project  @relation(fields: [projectId], references: [id])
  status      MeetingStatus @default(PROCESSING)
  issues      Issue[]

}

enum MeetingStatus {
  PROCESSING
  COMPLETED
}


model Issue {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  start  String 
  end  String 
  gist String
  headline String
  summary String
  meetingId String
  meeting   Meeting @relation(fields: [meetingId], references: [id])

}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model  StripeTransactions{
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  amount      Int
  credit      Int
  user        User     @relation(fields: [userId], references: [id])
}